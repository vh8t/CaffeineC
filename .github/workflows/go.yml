name: Build Go Binary

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  check_changes:
    outputs:
      run_build: ${{ steps.verify-changed-files.outputs.any_changed }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Verify Changed files
        uses: tj-actions/changed-files@v37
        id: verify-changed-files
        with:
          files: |
              src/**
              .github/workflows/llc.yml
              .github/workflows/go.yml
  
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check_changes
    if: needs.check_changes.outputs.run_build == 'true'
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      new_version: ${{ steps.semver.outputs.version }}
      release_id: ${{ steps.get_release_id.outputs.id }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: paulhatch/semantic-version@v5.0.2
        id: semver
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: false
      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@latest"
        id: create_release
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          title: "Release ${{ steps.semver.outputs.version_tag  }}"
          automatic_release_tag: "${{ steps.semver.outputs.version_tag  }}"
          prerelease: false
          draft: true
      - name: Get release ID
        id: get_release_id
        run: |
          RELEASE_ID=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.semver.outputs.version_tag }}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" | jq '.id')
          echo "::set-output name=id::$RELEASE_ID"

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [check_changes, create_release]
    if: needs.check_changes.outputs.run_build == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        go: [1.21.1]

    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go }}

    - name: Check out code
      uses: actions/checkout@v3

    - name: Download artifact
      if: matrix.os == 'windows-latest'
      id: download-artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: llc.yml
        workflow_conclusion: success
        name: RequiredBinaries
        path: ./src/windows

    - name: Get dependencies
      run: cd ./src && go get -v -t -d ./...

    - name: Update version
      run: |
        sed -i 's/Version:[[:space:]]*"[0-9]\+\.[0-9]\+\.[0-9]\+"/Version: "${{ needs.create_release.outputs.new_version }}"/g' ./src/main.go

    - name: Commit and push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ./src/main.go
        git add ./src/go.mod
        git add ./src/go.sum
        git commit -m "Update version to ${{ needs.create_release.outputs.new_version }}"
        git push

    - name: Build
      run: go build -v ./src

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: go-binary-${{ matrix.os }}
        path: ${{ runner.os == 'Windows' && 'CaffeineC.exe' || 'CaffeineC' }}
    
    - name: upload linux artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ runner.os == 'Windows' && './CaffeineC.exe' || './CaffeineC' }}
        asset_name: ${{ runner.os == 'Windows' && 'CaffeineC.exe' || 'CaffeineC' }}
        asset_content_type: application/octet-stream

  finalize_release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: [check_changes, create_release, build]
    if: always() && needs.check_changes.outputs.run_build == 'true'
    steps:
      - name: Publish or delete release
        run: |
          if ${{ needs.build.result == 'success' }}; then
            curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/releases/${{ needs.create_release.outputs.release_id }} \
              -d '{"draft": false}'
          else
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ needs.create_release.outputs.new_version }}
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/${{ needs.create_release.outputs.release_id }}
          fi