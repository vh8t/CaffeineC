Program = Statement* .
Statement = ((?= "var" <ident>) VariableDefinition? ";") | ((?= <ident> "=") Assignment? ";") | ((?= "extern" "func") ExternalFunctionDefinition? ";") | ((?= "private"? "static"? "func") FunctionDefinition?) | ((?= "class") ClassDefinition?) | ((?= "if") If?) | ((?= "for") For?) | ((?= "while") While?) | ((?= "return") Return?) | ((?= "private"? <ident> ":" <ident>) FieldDefinition?) | ("break" ";") | ("continue" ";") | Expression .
VariableDefinition = "var" <ident> ":" ("*"? <ident>) ("=" Expression)? .
Expression = Comparison OpExpression* .
Comparison = Term OpComparison* .
Term = Factor OpTerm* .
Factor = Value | ((?= "new") ClassInitializer) | ("(" Expression ")") | ((?= <ident> "(") FunctionCall) | ((?= <ident> ("." <ident>)+ "(") ClassMethod) | Identifier .
Value = <float> | <int> | ("true" | "false") | <string> | (<int> ("h" | "m" | "s" | "ms" | "us" | "ns")) .
ClassInitializer = "new" <ident> "(" ArgumentList ")" ";" .
ArgumentList = (Expression ("," Expression)*)? .
FunctionCall = <ident> "(" ArgumentList ")" ";" .
ClassMethod = Identifier "(" ArgumentList ")" ";" .
Identifier = <ident> ("." Identifier)* .
OpTerm = ("*" | "/" | "%") Factor .
OpComparison = (("=" "=") | ("<" "=") | "<" | (">" "=") | ">" | ("!" "=")) Term .
OpExpression = ("+" | "-") Comparison .
Assignment = Identifier "=" Expression .
ExternalFunctionDefinition = "extern" "func" <ident> "(" (ArgumentDefinition ("," ArgumentDefinition)*)? ")" (":" ("*"? <ident>))? .
ArgumentDefinition = <ident> ":" ("*"? <ident>) .
FunctionDefinition = "private"? "static"? "func" <ident> "(" (ArgumentDefinition ("," ArgumentDefinition)*)? ")" (":" <ident>)? "{" Statement* "}" .
ClassDefinition = "class" <ident> "{" Statement* "}" .
If = "if" "(" Expression ")" "{" Statement* "}" ("else" "if" ElseIf)* ("else" "{" Statement* "}")? .
ElseIf = "else" "if" "(" Expression ")" "{" Statement* "}" .
For = "for" "(" VariableDefinition ";" Expression ";" Assignment ")" "{" Statement* "}" .
While = "while" "(" Expression ")" "{" Statement* "}" .
Return = "return" Expression ";" .
FieldDefinition = "private"? <ident> ":" <ident> ";" .
